{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PPPModels","text":"<p>This package implements Poisson point process models using PyMC.</p>"},{"location":"examples/","title":"Examples","text":"<p>```python from pppmodels import Prophetoid import numpy as np import pandas as pd</p>"},{"location":"examples/#generate-example-data-with-seasonal-weekday-and-group-effects","title":"Generate example data with seasonal, weekday, and group effects","text":"<p>np.random.seed(42) date_rng = pd.date_range(start='2023-01-01', end='2023-01-31', freq='D') n = len(date_rng)</p>"},{"location":"examples/#seasonal-effects","title":"Seasonal effects","text":"<p>t = np.arange(n) cos_term_1 = np.cos(2 * np.pi * t / 365.24) sin_term_1 = np.sin(2 * np.pi * t / 365.24) cos_term_2 = np.cos(4 * 2 * np.pi * t / 365.24)  # Second order sin_term_2 = np.sin(4 * 2 * np.pi * t / 365.24)  # Second order</p>"},{"location":"examples/#weekday-effects","title":"Weekday effects","text":"<p>weekday = date_rng.dayofweek</p>"},{"location":"examples/#group-effects","title":"Group effects","text":"<p>group1 = np.random.choice(['A', 'B'], size=n) group2 = np.random.choice(['X', 'Y'], size=n)</p> <p>data = pd.DataFrame({     'date': date_rng,     'group1': group1,     'group2': group2,     'weekday': weekday,     'target': np.random.poisson(lam=np.exp(0.5 + 0.3 * cos_term_1 + 0.2 * sin_term_1 + 0.1 * cos_term_2 + 0.1 * sin_term_2                                           + 0.2 * (weekday - 3)**2 + 0.5 * (group1 == 'A') - 0.5 * (group2 == 'Y')), size=n) })</p>"},{"location":"examples/#instantiate-and-use-the-model-with-fourier-series-order-2","title":"Instantiate and use the model with Fourier series order 2","text":"<p>model = Prophetoid(data=data, date_col='date', target_col='target', group_cols=['group1', 'group2'], fourier_order=2) model.build_model() model.fit()</p>"},{"location":"examples/#get-the-trace-and-print-summary","title":"Get the trace and print summary","text":"<p>trace = model.get_trace() print(pm.summary(trace))</p> <p>import arviz as az</p> <p>print(az.loo(trace)) ``</p>"}]}